package com.commerce.data.user.order.mapper

import com.commerce.data.user.order.dto.OrderRequest
import com.commerce.domain.order.model.OrderEntity
import com.commerce.domain.order.model.OrderItemEntity

/**
 * Extension function to convert an [OrderRequest] DTO to a domain [OrderEntity].
 *
 * @param userId The ID of the user placing the order; injected here as it is not part of the request.
 * @return [OrderEntity] domain model representing the order, ready to be processed or persisted.
 */
fun OrderRequest.toEntity(userId: String): OrderEntity {
    // Map each item in the request DTO to a domain OrderItemEntity
    val items = this.items.map {
        OrderItemEntity(
            productId = it.productId,
            quantity = it.quantity,
            price = it.price
        )
    }

    // Calculate the total price for the order by summing price * quantity for all items
    val total = items.sumOf { it.price * it.quantity }

    return OrderEntity(
        orderId = "", // Will be generated by persistence layer or service
        userId = userId, // Associate order with the requesting user
        totalPrice = total, // Computed total order price
        status = "PENDING", // Initial status of the order
        createdAt = System.currentTimeMillis(), // Timestamp when the order was created
        items = items // List of order items mapped from request
    )
}
